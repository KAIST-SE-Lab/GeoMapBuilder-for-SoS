package kr.ac.kaist.se.model.sos;

import kr.ac.kaist.se.data.SimLogEvent;
import kr.ac.kaist.se.model.abst.cap._SimAction_;
import kr.ac.kaist.se.model.abst.obj._SimObject_;
import kr.ac.kaist.se.model.sos.cap.MoveAction;

import java.util.ArrayList;

/**
 * Abstract class to represent an object who can move around SoSMap
 *
 * An Entity class is defined as an actionable object (which can perform its own action(s))
 * (note: independent from SIMVA-SoS Lite)
 *
 * @author ymbaek, ehcho, yjshin
 */
public abstract class Entity extends _SimObject_ {

    //SoS that this object belongs to
    protected SoS mySoS;

    /* ArrayLists to store _SimAction_ objects */
    protected ArrayList<_SimAction_> capableActionList = new ArrayList<>();     //List of capable actions
    protected ArrayList<_SimAction_> selectedActionList = new ArrayList<>();    //List of selected actions for execution of a particular tick


    public Entity(SoS mySoS,
                  String id,
                  String name) {
        super(id, name);
        this.mySoS = mySoS;

        //Initialization of object location
        initObjLocation();

        //Initialization of actions
        initActions();
    }

    public Entity(SoS mySoS,
                  String id,
                  String name,
                  String objLocation) {
        super(id, name, objLocation);
        this.mySoS = mySoS;

        //Initialization of object location
        initObjLocation();

        //Initialization of actions
        initActions();
    }


    /*
        Note that if you implement run(..) method here,
        all the instantiated Entity objects have same run(..) methods.
        (i.e., All entities have same capabilities and behaviors.)
         */
    @Override
    public ArrayList<SimLogEvent> run(int tick) {

        //List of SimLogEvents generated by running actions
        ArrayList<SimLogEvent> logEventList = new ArrayList<>();

        selectActions();

        for (_SimAction_ action : selectedActionList){
            ArrayList<SimLogEvent> actionRunLog = doAction(action, tick);

            if (actionRunLog != null) {
                logEventList.addAll(actionRunLog);
            }
        }

        return logEventList;
    }


    private ArrayList<SimLogEvent> doAction(_SimAction_ actionObj, int tick){

        ArrayList<SimLogEvent> actionLogEvents = new ArrayList<>();

        //This project only considers MoveAction.
        //However, original class (_SimActionableObject_) can perform:
        //(1)FuncAction, (2)MoveAction, and (3)CommAction
        if (actionObj instanceof MoveAction){
            actionLogEvents = actionObj.executeAction(tick);
        }

        return actionLogEvents;
    }



    /**
     * Initialization of actions
     */
    protected abstract void initActions();

    /**
     * Select an action(s) and store into selectedActionList
     */
    protected abstract void selectActions();


    /* Getters & Setters */

    public ArrayList<_SimAction_> getCapableActionList() {
        return capableActionList;
    }

    public void setCapableActionList(ArrayList<_SimAction_> capableActionList) {
        this.capableActionList = capableActionList;
    }

    public void addCapableAction(_SimAction_ aAction){
        if (aAction != null){
            this.capableActionList.add(aAction);
        }
    }


    public SoS getMySoS() {
        return mySoS;
    }

    public void setMySoS(SoS mySoS) {
        this.mySoS = mySoS;
    }
}
